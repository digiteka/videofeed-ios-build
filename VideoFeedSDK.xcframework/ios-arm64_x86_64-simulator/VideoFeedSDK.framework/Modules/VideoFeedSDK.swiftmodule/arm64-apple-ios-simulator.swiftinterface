// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios12.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name VideoFeedSDK
import Foundation
import Swift
import SwiftUI
import UIKit
@_exported import VideoFeedSDK
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VideoFeedCarrouselCollectionViewCell : UIKit.UICollectionViewCell {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency public func load(with mdtk: Swift.String, zoneId: Swift.Int? = nil, adunitPath: Swift.String? = nil, delegate: (any VideoFeedSDK.VideoFeedCarousselDelegate)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VideoFeedSDK.VideoFeedCarrouselCollectionViewCell {
  @_Concurrency.MainActor @preconcurrency public static var nib: UIKit.UINib {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VideoFeedCarrouselTableViewCell : UIKit.UITableViewCell {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency public func load(with mdtk: Swift.String, zoneId: Swift.Int? = nil, adunitPath: Swift.String? = nil, delegate: (any VideoFeedSDK.VideoFeedCarousselDelegate)? = nil)
  @available(iOS 3.0, *)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VideoFeedSDK.VideoFeedCarrouselTableViewCell {
  @_Concurrency.MainActor @preconcurrency public static var nib: UIKit.UINib {
    get
  }
}
public protocol VideoFeedCarousselDelegate : AnyObject {
  func didTapOnItem(at videoId: Swift.String)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class VideoFeedCarrouselView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func load(with mdtk: Swift.String, zoneId: Swift.Int? = nil, adunitPath: Swift.String? = nil, delegate: (any VideoFeedSDK.VideoFeedCarousselDelegate)? = nil)
  @objc deinit
}
extension VideoFeedSDK.VideoFeedCarrouselView : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping @_Concurrency.MainActor (WebKit.WKNavigationActionPolicy) -> Swift.Void)
}
@available(iOS 13.0, *)
@_Concurrency.MainActor @preconcurrency public struct VideoFeedCarrouselViewSUI : SwiftUI.UIViewRepresentable {
  @_Concurrency.MainActor @preconcurrency public init(mdtk: Swift.String, zoneId: Swift.Int? = nil, adunitPath: Swift.String? = nil, callback: ((Swift.String) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: VideoFeedSDK.VideoFeedCarrouselViewSUI.Context) -> VideoFeedSDK.VideoFeedCarrouselView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: VideoFeedSDK.VideoFeedCarrouselView, context: VideoFeedSDK.VideoFeedCarrouselViewSUI.Context)
  @available(iOS 13.0, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, *)
  public typealias Coordinator = Swift.Void
  @available(iOS 13.0, *)
  public typealias UIViewType = VideoFeedSDK.VideoFeedCarrouselView
}
public protocol VideoFeedDelegate : AnyObject {
  func handleExternalLink(url: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor @preconcurrency public class VideoFeedViewController : UIKit.UIViewController {
  @_Concurrency.MainActor @preconcurrency convenience public init(videoId: Swift.String? = nil, zoneId: Swift.Int? = nil, mdtk: Swift.String, adunitPath: Swift.String? = nil, showCloseButton: Swift.Bool = false, delegate: (any VideoFeedSDK.VideoFeedDelegate)? = nil)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidLoad()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension VideoFeedSDK.VideoFeedViewController : WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping @_Concurrency.MainActor (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationResponse: WebKit.WKNavigationResponse, decisionHandler: @escaping @_Concurrency.MainActor (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
}
extension VideoFeedSDK.VideoFeedViewController : WebKit.WKUIDelegate {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
extension VideoFeedSDK.VideoFeedViewController : WebKit.WKScriptMessageHandler {
  @_Concurrency.MainActor @preconcurrency @objc dynamic public func userContentController(_ userContentController: WebKit.WKUserContentController, didReceive message: WebKit.WKScriptMessage)
}
@available(iOS 13.0, *)
@_Concurrency.MainActor @preconcurrency public struct VideoFeedViewSUI : SwiftUI.UIViewControllerRepresentable {
  public typealias UIViewControllerType = VideoFeedSDK.VideoFeedViewController
  @_Concurrency.MainActor @preconcurrency public init(videoId: Swift.String? = nil, zoneId: Swift.Int? = nil, mdtk: Swift.String, adUnitPath: Swift.String? = nil, showCloseButton: Swift.Bool = false, onLinkActivated: ((Foundation.URL) -> Swift.Void)? = nil)
  @_Concurrency.MainActor @preconcurrency public func makeUIViewController(context: VideoFeedSDK.VideoFeedViewSUI.Context) -> VideoFeedSDK.VideoFeedViewController
  @_Concurrency.MainActor @preconcurrency public func updateUIViewController(_ uiViewController: VideoFeedSDK.VideoFeedViewController, context: VideoFeedSDK.VideoFeedViewSUI.Context)
  @available(iOS 13.0, *)
  public typealias Body = Swift.Never
  @available(iOS 13.0, *)
  public typealias Coordinator = Swift.Void
}
@available(iOS 13.0, *)
extension VideoFeedSDK.VideoFeedCarrouselViewSUI : Swift.Sendable {}
@available(iOS 13.0, *)
extension VideoFeedSDK.VideoFeedViewSUI : Swift.Sendable {}
